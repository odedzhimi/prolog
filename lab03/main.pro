% Copyright

implement main
    open core, file, stdio

domains
    genre = развлекательный; научный; бытовой; новостной; спортивный.

class facts - publications
    журнал : (integer Id, string Название, genre Жанр, integer Цена).
    газета : (integer Id, string Название, genre Жанр, integer Цена).
    подписчик : (integer Id, string ФИО, integer Возраст, string Адрес).
    подписан : (integer Id_подписчика, integer Id_подписки).

class predicates  %Вспомогательные предикаты
    длина : (A*) -> integer N.
    сумма_элем : (real* List) -> real Sum.
    среднее_списка : (real* List) -> real Average determ.

class predicates  %Основные предикаты
    %Правило "Список подписок для каждого человека"
    читает : (string Имя) -> string* Названия determ.
    %Правило "Издание и кто на него подписан"
    подписчикиИздания : (string Название) -> string* Подписчики determ.
    %Правило "Сбор набора из трёх подписок до 300 рублей"
    суммаПоЖанру : (genre Жанр) -> real Сумма determ.
    %Правило "Вывод людей, подписанных на определенный жанр издания"
    жанр : (genre Жанр) -> string* Подписчики determ.
    %Правило "Куда развозят издания?"
    доставка : (string Название) -> string* Адреса determ.
    издание : (integer Id, string Название, genre Жанр, integer Цена) nondeterm (i,i,o,o) (o,i,o,i) (o,i,o,o) (o,o,i,o) (o,o,o,o) (o,o,o,i) (i,o,o,o).
    %Число людей, подписанных на один жанр
    колвоЛюдей : (genre Жанр) -> integer N determ.
    %Средняя цена изданий одного жанра
    средЦена : (genre Жанр) -> real N determ.

clauses
    длина([]) = 0.
    длина([_ | T]) = длина(T) + 1.

    сумма_элем([]) = 0.
    сумма_элем([H | T]) = сумма_элем(T) + H.

    среднее_списка(L) = сумма_элем(L) / длина(L) :-
        длина(L) > 0.

clauses
    издание(А, Б, В, Г) :-
        журнал(А, Б, В, Г).
    издание(А, Б, В, Г) :-
        газета(А, Б, В, Г).

    %Правило "Список подписок для каждого человека"
    читает(Имя) = List :-
        подписчик(НомерП, Имя, _, _),
        !,
        List =
            [ Название ||
                подписан(НомерП, НомерИ),
                издание(НомерИ, Название, _, _)
            ].

    %Правило "Издание и кто на него подписан"
    подписчикиИздания(Название) = List :-
        издание(НомерИ, Название, _, _),
        !,
        List =
            [ Имя ||
                подписчик(НомерП, Имя, _, _),
                подписан(НомерП, НомерИ)
            ].

    %Правило "Сумма всех изданий одного жанра"
    суммаПоЖанру(Жанр) = сумма_элем([ Цена || издание(_, _, Жанр, Цена) ]) :-
        !.

    %Правило "Вывод людей, подписанных на определенный жанр издания"
    жанр(Жанр) = List :-
        издание(Id_издания, _, Жанр, _),
        !,
        List =
            [ Имя ||
                подписан(Id_подписчика, Id_издания),
                подписчик(Id_подписчика, Имя, _, _)
            ].

    %Правило "Куда развозят издания?"
    доставка(Название) = List :-
        издание(Id_издания, Название, _, _),
        !,
        List =
            [ Адрес ||
                подписан(Id_подписчика, Id_издания),
                подписчик(Id_подписчика, _, _, Адрес)
            ].

    %Правило "%Число людей, подписанных на один жанр"
    колвоЛюдей(Жанр) = длина(жанр(Жанр)).

    %Правило "Средняя цена изданий одного жанра"
    средЦена(Жанр) = среднее_списка([ Цена || издание(_, _, Жанр, Цена) ]).

class predicates
    write_string : (string* Строки).
clauses
    write_string(L) :-
        foreach Элемент = list::getMember_nd(L) do
            write(Элемент, '; ')
        end foreach,
        write('\n').

clauses
    run() :-
        consult("C:\\prolog\\lab3\\data.txt", publications),
        fail.

    run() :-
        write("\nЧеловек и его издания: \n"),
        X = "Мишина Анастасия Алексеевна",
        write(X, ': '),
        L = читает(X),
        write_string(L),
        fail.

    run() :-
        write("\nИздание и кто на него подписан: \n"),
        X = "Сельцовский вестник",
        write(X, ': '),
        L = подписчикиИздания(X),
        write_string(L),
        fail.

    run() :-
        write("\nЖанр и его подписчики: \n"),
        X = новостной,
        write(X, ': '),
        L = жанр(X),
        write_string(L),
        fail.

    run() :-
        write("\nЖанр и число его подписчиков: \n"),
        X = новостной,
        write(X, ': '),
        N = колвоЛюдей(X),
        write(N, '\n'),
        fail.

    run() :-
        write("\nЦена всех изданий по жанру: \n"),
        X = новостной,
        write(X, ': '),
        Sum = суммаПоЖанру(X),
        write(Sum, '\n'),
        fail.

    run() :-
        write("\nСредняя цена изданий одного жанра: \n"),
        X = новостной,
        write(X, ': '),
        Sred = средЦена(X),
        write(Sred, '\n'),
        fail.

    run() :-
        write("\nКуда развозят издания: \n"),
        X = "Брянские новости",
        write(X, ': '),
        L = доставка("Брянские новости"),
        write_string(L),
        fail.

    run().

end implement main

goal
    console::run(main::run).
